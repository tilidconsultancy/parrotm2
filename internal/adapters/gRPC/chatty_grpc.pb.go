// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/chatty.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeechServiceStreamClient is the client API for SpeechServiceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechServiceStreamClient interface {
	TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (SpeechServiceStream_TextToSpeechClient, error)
	SpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechServiceStream_SpeechToTextClient, error)
}

type speechServiceStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechServiceStreamClient(cc grpc.ClientConnInterface) SpeechServiceStreamClient {
	return &speechServiceStreamClient{cc}
}

func (c *speechServiceStreamClient) TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (SpeechServiceStream_TextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechServiceStream_ServiceDesc.Streams[0], "/chatty.proto.SpeechServiceStream/TextToSpeech", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechServiceStreamTextToSpeechClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpeechServiceStream_TextToSpeechClient interface {
	Recv() (*AudioBuffer, error)
	grpc.ClientStream
}

type speechServiceStreamTextToSpeechClient struct {
	grpc.ClientStream
}

func (x *speechServiceStreamTextToSpeechClient) Recv() (*AudioBuffer, error) {
	m := new(AudioBuffer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechServiceStreamClient) SpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechServiceStream_SpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechServiceStream_ServiceDesc.Streams[1], "/chatty.proto.SpeechServiceStream/SpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechServiceStreamSpeechToTextClient{stream}
	return x, nil
}

type SpeechServiceStream_SpeechToTextClient interface {
	Send(*SpeechToTextRequest) error
	Recv() (*SpeechToTextResponse, error)
	grpc.ClientStream
}

type speechServiceStreamSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *speechServiceStreamSpeechToTextClient) Send(m *SpeechToTextRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechServiceStreamSpeechToTextClient) Recv() (*SpeechToTextResponse, error) {
	m := new(SpeechToTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechServiceStreamServer is the server API for SpeechServiceStream service.
// All implementations must embed UnimplementedSpeechServiceStreamServer
// for forward compatibility
type SpeechServiceStreamServer interface {
	TextToSpeech(*TextToSpeechRequest, SpeechServiceStream_TextToSpeechServer) error
	SpeechToText(SpeechServiceStream_SpeechToTextServer) error
	mustEmbedUnimplementedSpeechServiceStreamServer()
}

// UnimplementedSpeechServiceStreamServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechServiceStreamServer struct {
}

func (UnimplementedSpeechServiceStreamServer) TextToSpeech(*TextToSpeechRequest, SpeechServiceStream_TextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}
func (UnimplementedSpeechServiceStreamServer) SpeechToText(SpeechServiceStream_SpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}
func (UnimplementedSpeechServiceStreamServer) mustEmbedUnimplementedSpeechServiceStreamServer() {}

// UnsafeSpeechServiceStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechServiceStreamServer will
// result in compilation errors.
type UnsafeSpeechServiceStreamServer interface {
	mustEmbedUnimplementedSpeechServiceStreamServer()
}

func RegisterSpeechServiceStreamServer(s grpc.ServiceRegistrar, srv SpeechServiceStreamServer) {
	s.RegisterService(&SpeechServiceStream_ServiceDesc, srv)
}

func _SpeechServiceStream_TextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextToSpeechRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeechServiceStreamServer).TextToSpeech(m, &speechServiceStreamTextToSpeechServer{stream})
}

type SpeechServiceStream_TextToSpeechServer interface {
	Send(*AudioBuffer) error
	grpc.ServerStream
}

type speechServiceStreamTextToSpeechServer struct {
	grpc.ServerStream
}

func (x *speechServiceStreamTextToSpeechServer) Send(m *AudioBuffer) error {
	return x.ServerStream.SendMsg(m)
}

func _SpeechServiceStream_SpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechServiceStreamServer).SpeechToText(&speechServiceStreamSpeechToTextServer{stream})
}

type SpeechServiceStream_SpeechToTextServer interface {
	Send(*SpeechToTextResponse) error
	Recv() (*SpeechToTextRequest, error)
	grpc.ServerStream
}

type speechServiceStreamSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *speechServiceStreamSpeechToTextServer) Send(m *SpeechToTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechServiceStreamSpeechToTextServer) Recv() (*SpeechToTextRequest, error) {
	m := new(SpeechToTextRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechServiceStream_ServiceDesc is the grpc.ServiceDesc for SpeechServiceStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechServiceStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatty.proto.SpeechServiceStream",
	HandlerType: (*SpeechServiceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TextToSpeech",
			Handler:       _SpeechServiceStream_TextToSpeech_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SpeechToText",
			Handler:       _SpeechServiceStream_SpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chatty.proto",
}
